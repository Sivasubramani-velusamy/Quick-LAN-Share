{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useRef, useState } from 'react';\nimport SockJS from 'sockjs-client';\nimport { Client } from '@stomp/stompjs';\nconst useWebSocket = () => {\n  _s();\n  const client = useRef(null);\n  const [messages, setMessages] = useState([]);\n  const [connected, setConnected] = useState(false);\n  useEffect(() => {\n    const url = 'http://localhost:9092/ws/progress';\n    client.current = new Client({\n      brokerURL: undefined,\n      webSocketFactory: () => new SockJS(url),\n      reconnectDelay: 5000,\n      debug: str => {\n        console.log(str);\n      }\n    });\n    client.current.onConnect = () => {\n      setConnected(true);\n      console.log('STOMP connected');\n      client.current.subscribe('/topic/progress', message => {\n        if (message.body) {\n          setMessages(prev => [...prev, message.body]);\n          console.log('Received message:', message.body);\n        }\n      });\n    };\n    client.current.onStompError = frame => {\n      setConnected(false);\n      console.error('STOMP error:', frame);\n    };\n    client.current.onWebSocketClose = () => {\n      setConnected(false);\n      console.log('STOMP disconnected');\n    };\n    client.current.activate();\n    return () => {\n      if (client.current) {\n        client.current.deactivate();\n      }\n    };\n  }, [url]);\n  const sendMessage = msg => {\n    if (client.current && client.current.connected) {\n      client.current.publish({\n        destination: '/app/progress',\n        body: msg\n      });\n    } else {\n      console.error('STOMP client is not connected');\n    }\n  };\n  return {\n    connected,\n    messages,\n    sendMessage\n  };\n};\n_s(useWebSocket, \"EScisWTPD4gMgqU7hIewul6rTwE=\");\nexport default useWebSocket;","map":{"version":3,"names":["useEffect","useRef","useState","SockJS","Client","useWebSocket","_s","client","messages","setMessages","connected","setConnected","url","current","brokerURL","undefined","webSocketFactory","reconnectDelay","debug","str","console","log","onConnect","subscribe","message","body","prev","onStompError","frame","error","onWebSocketClose","activate","deactivate","sendMessage","msg","publish","destination"],"sources":["C:/Users/sivas/My Project/QuickLAN/frontend/src/hooks/useWebSocket.js"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\r\nimport SockJS from 'sockjs-client';\r\nimport { Client } from '@stomp/stompjs';\r\n\r\nconst useWebSocket = () => {\r\n  const client = useRef(null);\r\n  const [messages, setMessages] = useState([]);\r\n  const [connected, setConnected] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const url = 'http://localhost:9092/ws/progress';\r\n    client.current = new Client({\r\n      brokerURL: undefined,\r\n      webSocketFactory: () => new SockJS(url),\r\n      reconnectDelay: 5000,\r\n      debug: (str) => {\r\n        console.log(str);\r\n      },\r\n    });\r\n\r\n    client.current.onConnect = () => {\r\n      setConnected(true);\r\n      console.log('STOMP connected');\r\n\r\n      client.current.subscribe('/topic/progress', (message) => {\r\n        if (message.body) {\r\n          setMessages((prev) => [...prev, message.body]);\r\n          console.log('Received message:', message.body);\r\n        }\r\n      });\r\n    };\r\n\r\n    client.current.onStompError = (frame) => {\r\n      setConnected(false);\r\n      console.error('STOMP error:', frame);\r\n    };\r\n\r\n    client.current.onWebSocketClose = () => {\r\n      setConnected(false);\r\n      console.log('STOMP disconnected');\r\n    };\r\n\r\n    client.current.activate();\r\n\r\n    return () => {\r\n      if (client.current) {\r\n        client.current.deactivate();\r\n      }\r\n    };\r\n  }, [url]);\r\n\r\n  const sendMessage = (msg) => {\r\n    if (client.current && client.current.connected) {\r\n      client.current.publish({ destination: '/app/progress', body: msg });\r\n    } else {\r\n      console.error('STOMP client is not connected');\r\n    }\r\n  };\r\n\r\n  return { connected, messages, sendMessage };\r\n};\r\n\r\nexport default useWebSocket;\r\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AACnD,OAAOC,MAAM,MAAM,eAAe;AAClC,SAASC,MAAM,QAAQ,gBAAgB;AAEvC,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAMC,MAAM,GAAGN,MAAM,CAAC,IAAI,CAAC;EAC3B,MAAM,CAACO,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAEjDF,SAAS,CAAC,MAAM;IACd,MAAMY,GAAG,GAAG,mCAAmC;IAC/CL,MAAM,CAACM,OAAO,GAAG,IAAIT,MAAM,CAAC;MAC1BU,SAAS,EAAEC,SAAS;MACpBC,gBAAgB,EAAEA,CAAA,KAAM,IAAIb,MAAM,CAACS,GAAG,CAAC;MACvCK,cAAc,EAAE,IAAI;MACpBC,KAAK,EAAGC,GAAG,IAAK;QACdC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;MAClB;IACF,CAAC,CAAC;IAEFZ,MAAM,CAACM,OAAO,CAACS,SAAS,GAAG,MAAM;MAC/BX,YAAY,CAAC,IAAI,CAAC;MAClBS,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;MAE9Bd,MAAM,CAACM,OAAO,CAACU,SAAS,CAAC,iBAAiB,EAAGC,OAAO,IAAK;QACvD,IAAIA,OAAO,CAACC,IAAI,EAAE;UAChBhB,WAAW,CAAEiB,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAEF,OAAO,CAACC,IAAI,CAAC,CAAC;UAC9CL,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEG,OAAO,CAACC,IAAI,CAAC;QAChD;MACF,CAAC,CAAC;IACJ,CAAC;IAEDlB,MAAM,CAACM,OAAO,CAACc,YAAY,GAAIC,KAAK,IAAK;MACvCjB,YAAY,CAAC,KAAK,CAAC;MACnBS,OAAO,CAACS,KAAK,CAAC,cAAc,EAAED,KAAK,CAAC;IACtC,CAAC;IAEDrB,MAAM,CAACM,OAAO,CAACiB,gBAAgB,GAAG,MAAM;MACtCnB,YAAY,CAAC,KAAK,CAAC;MACnBS,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;IACnC,CAAC;IAEDd,MAAM,CAACM,OAAO,CAACkB,QAAQ,CAAC,CAAC;IAEzB,OAAO,MAAM;MACX,IAAIxB,MAAM,CAACM,OAAO,EAAE;QAClBN,MAAM,CAACM,OAAO,CAACmB,UAAU,CAAC,CAAC;MAC7B;IACF,CAAC;EACH,CAAC,EAAE,CAACpB,GAAG,CAAC,CAAC;EAET,MAAMqB,WAAW,GAAIC,GAAG,IAAK;IAC3B,IAAI3B,MAAM,CAACM,OAAO,IAAIN,MAAM,CAACM,OAAO,CAACH,SAAS,EAAE;MAC9CH,MAAM,CAACM,OAAO,CAACsB,OAAO,CAAC;QAAEC,WAAW,EAAE,eAAe;QAAEX,IAAI,EAAES;MAAI,CAAC,CAAC;IACrE,CAAC,MAAM;MACLd,OAAO,CAACS,KAAK,CAAC,+BAA+B,CAAC;IAChD;EACF,CAAC;EAED,OAAO;IAAEnB,SAAS;IAAEF,QAAQ;IAAEyB;EAAY,CAAC;AAC7C,CAAC;AAAC3B,EAAA,CAxDID,YAAY;AA0DlB,eAAeA,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}