{"ast":null,"code":"\n// import React, { useState, useEffect } from 'react';\n// import {\n//   Box,\n//   Typography,\n//   Paper,\n//   List,\n//   ListItem,\n//   ListItemText,\n//   Snackbar,\n//   Alert,\n// } from '@mui/material';\n// import axios from 'axios';\n// import FileUploader from '../components/FileUploader';\n// import TransferLogs from '../components/TransferLogs';\n\n// const DashboardPage = ({ receiverIp, receiverPort }) => {\n//   const [files, setFiles] = useState([]);\n//   const [progressMessages, setProgressMessages] = useState([]);\n//   const [uploading, setUploading] = useState(false);\n//   const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'info' });\n\n//   useEffect(() => {\n//     fetchFiles();\n//   }, []);\n\n//   const fetchFiles = async () => {\n//     try {\n//       const response = await axios.get('http://localhost:9092/api/files');\n//       setFiles(response.data);\n//     } catch (error) {\n//       console.error('Error fetching files:', error);\n//       showSnackbar('Failed to fetch files', 'error');\n//     }\n//   };\n\n//   const showSnackbar = (message, severity = 'info') => {\n//     setSnackbar({ open: true, message, severity });\n//   };\n\n//   const handleCloseSnackbar = () => {\n//     setSnackbar({ ...snackbar, open: false });\n//   };\n\n//   const handleFileUpload = async (file) => {\n//     if (!receiverIp || !receiverPort) {\n//       showSnackbar('Receiver IP and port must be set.', 'warning');\n//       return;\n//     }\n\n//     setUploading(true);\n//     try {\n//       const formData = new FormData();\n//       formData.append('file', file);\n\n//       // Upload file to backend\n//       await axios.post('http://localhost:9092/api/files/upload', formData, {\n//         headers: { 'Content-Type': 'multipart/form-data' },\n//       });\n\n//       // Send file via TCP\n//       await axios.post('http://localhost:9092/api/send', null, {\n//         params: {\n//           receiverIp,\n//           receiverPort,\n//           filePath: `received_files/${file.name}`,\n//         },\n//       });\n\n//       showSnackbar('File sent successfully!', 'success');\n//       fetchFiles();\n//     } \n//     catch (error ) {\n//       console.error('Error sending file:', error);\n//       //showSnackbar('Failed to send file.', 'error');\n//     } \n//     finally {\n//       setUploading(false);\n//     }\n//   };\n\n//   return (\n//     <Box>\n//       <Typography variant=\"h5\" gutterBottom>\n//         Dashboard\n//       </Typography>\n\n//       <FileUploader onFileUpload={handleFileUpload} uploading={uploading} />\n\n//       <Typography variant=\"h6\" sx={{ mt: 4 }}>\n//         Available Files\n//       </Typography>\n//       <Paper sx={{ maxHeight: 200, overflowY: 'auto' }}>\n//         <List>\n//           {files.map((file) => (\n//             <ListItem key={file.name} divider>\n//               <ListItemText primary={file.name} secondary={`${file.size} bytes`} />\n//             </ListItem>\n//           ))}\n//         </List>\n//       </Paper>\n\n//       <TransferLogs logs={progressMessages} />\n\n//       <Snackbar\n//         open={snackbar.open}\n//         autoHideDuration={6000}\n//         onClose={handleCloseSnackbar}\n//         anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n//       >\n//         <Alert onClose={handleCloseSnackbar} severity={snackbar.severity} sx={{ width: '100%' }}>\n//           {snackbar.message}\n//         </Alert>\n//       </Snackbar>\n//     </Box>\n//   );\n// };\n\n// export default DashboardPage;","map":{"version":3,"names":[],"sources":["C:/Users/sivas/My Project/QuickLAN/frontend/src/pages/DashboardPage.jsx"],"sourcesContent":["\r\n// import React, { useState, useEffect } from 'react';\r\n// import {\r\n//   Box,\r\n//   Typography,\r\n//   Paper,\r\n//   List,\r\n//   ListItem,\r\n//   ListItemText,\r\n//   Snackbar,\r\n//   Alert,\r\n// } from '@mui/material';\r\n// import axios from 'axios';\r\n// import FileUploader from '../components/FileUploader';\r\n// import TransferLogs from '../components/TransferLogs';\r\n\r\n// const DashboardPage = ({ receiverIp, receiverPort }) => {\r\n//   const [files, setFiles] = useState([]);\r\n//   const [progressMessages, setProgressMessages] = useState([]);\r\n//   const [uploading, setUploading] = useState(false);\r\n//   const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'info' });\r\n\r\n//   useEffect(() => {\r\n//     fetchFiles();\r\n//   }, []);\r\n\r\n//   const fetchFiles = async () => {\r\n//     try {\r\n//       const response = await axios.get('http://localhost:9092/api/files');\r\n//       setFiles(response.data);\r\n//     } catch (error) {\r\n//       console.error('Error fetching files:', error);\r\n//       showSnackbar('Failed to fetch files', 'error');\r\n//     }\r\n//   };\r\n\r\n//   const showSnackbar = (message, severity = 'info') => {\r\n//     setSnackbar({ open: true, message, severity });\r\n//   };\r\n\r\n//   const handleCloseSnackbar = () => {\r\n//     setSnackbar({ ...snackbar, open: false });\r\n//   };\r\n\r\n//   const handleFileUpload = async (file) => {\r\n//     if (!receiverIp || !receiverPort) {\r\n//       showSnackbar('Receiver IP and port must be set.', 'warning');\r\n//       return;\r\n//     }\r\n\r\n//     setUploading(true);\r\n//     try {\r\n//       const formData = new FormData();\r\n//       formData.append('file', file);\r\n\r\n//       // Upload file to backend\r\n//       await axios.post('http://localhost:9092/api/files/upload', formData, {\r\n//         headers: { 'Content-Type': 'multipart/form-data' },\r\n//       });\r\n\r\n//       // Send file via TCP\r\n//       await axios.post('http://localhost:9092/api/send', null, {\r\n//         params: {\r\n//           receiverIp,\r\n//           receiverPort,\r\n//           filePath: `received_files/${file.name}`,\r\n//         },\r\n//       });\r\n\r\n//       showSnackbar('File sent successfully!', 'success');\r\n//       fetchFiles();\r\n//     } \r\n//     catch (error ) {\r\n//       console.error('Error sending file:', error);\r\n//       //showSnackbar('Failed to send file.', 'error');\r\n//     } \r\n//     finally {\r\n//       setUploading(false);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <Box>\r\n//       <Typography variant=\"h5\" gutterBottom>\r\n//         Dashboard\r\n//       </Typography>\r\n\r\n//       <FileUploader onFileUpload={handleFileUpload} uploading={uploading} />\r\n\r\n//       <Typography variant=\"h6\" sx={{ mt: 4 }}>\r\n//         Available Files\r\n//       </Typography>\r\n//       <Paper sx={{ maxHeight: 200, overflowY: 'auto' }}>\r\n//         <List>\r\n//           {files.map((file) => (\r\n//             <ListItem key={file.name} divider>\r\n//               <ListItemText primary={file.name} secondary={`${file.size} bytes`} />\r\n//             </ListItem>\r\n//           ))}\r\n//         </List>\r\n//       </Paper>\r\n\r\n//       <TransferLogs logs={progressMessages} />\r\n\r\n//       <Snackbar\r\n//         open={snackbar.open}\r\n//         autoHideDuration={6000}\r\n//         onClose={handleCloseSnackbar}\r\n//         anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\r\n//       >\r\n//         <Alert onClose={handleCloseSnackbar} severity={snackbar.severity} sx={{ width: '100%' }}>\r\n//           {snackbar.message}\r\n//         </Alert>\r\n//       </Snackbar>\r\n//     </Box>\r\n//   );\r\n// };\r\n\r\n// export default DashboardPage;\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}