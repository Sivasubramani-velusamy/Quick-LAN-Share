{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sivas\\\\My Project\\\\QuickLAN\\\\frontend\\\\src\\\\components\\\\ConnectionForm.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import { Box, TextField, Button, Typography, Paper } from '@mui/material';\n\n// const ConnectionForm = ({ onConnect }) => {\n//   const [ip, setIp] = useState('');\n//   const [port, setPort] = useState(9090);\n\n//   const handleConnect = () => {\n//     if (ip && port) {\n//       onConnect(ip, port);\n//     }\n//   };\n\n//   return (\n//     <Paper sx={{ p: 3, maxWidth: 400, margin: 'auto', mt: 6 }}>\n//       <Typography variant=\"h5\" gutterBottom>\n//         Connect to Receiver\n//       </Typography>\n//       <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>\n//         <TextField\n//           label=\"Receiver IP\"\n//           value={ip}\n//           onChange={(e) => setIp(e.target.value)}\n//           fullWidth\n//         />\n//         <TextField\n//           label=\"Receiver Port\"\n//           type=\"number\"\n//           value={port}\n//           onChange={(e) => setPort(Number(e.target.value))}\n//           fullWidth\n//         />\n//         <Button variant=\"contained\" onClick={handleConnect} disabled={!ip || !port}>\n//           Connect\n//         </Button>\n//       </Box>\n//     </Paper>\n//   );\n// };\n\n// export default ConnectionForm;\n\nimport React, { useState } from 'react';\nimport { Box, TextField, Button, Typography, Paper, InputAdornment } from '@mui/material';\nimport LanIcon from '@mui/icons-material/Lan';\nimport DnsIcon from '@mui/icons-material/Dns';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConnectionForm = ({\n  onConnect\n}) => {\n  _s();\n  const [ip, setIp] = useState('');\n  const [port, setPort] = useState(9090);\n  const [error, setError] = useState('');\n  const validateIP = ip => {\n    const ipRegex = /^(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.((25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){2}(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)$/;\n    return ipRegex.test(ip);\n  };\n  const handleConnect = () => {\n    if (!validateIP(ip)) {\n      setError('Invalid IP address');\n      return;\n    }\n    setError('');\n    onConnect(ip, port);\n  };\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    sx: {\n      p: 4,\n      maxWidth: 400,\n      margin: 'auto',\n      mt: 6,\n      boxShadow: 3\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h5\",\n      gutterBottom: true,\n      textAlign: \"center\",\n      children: \"Connect to Receiver\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        flexDirection: 'column',\n        gap: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Receiver IP\",\n        value: ip,\n        onChange: e => setIp(e.target.value),\n        error: !!error,\n        helperText: error,\n        fullWidth: true,\n        InputProps: {\n          startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n            position: \"start\",\n            children: /*#__PURE__*/_jsxDEV(LanIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 15\n          }, this)\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Port\",\n        type: \"number\",\n        value: port,\n        onChange: e => setPort(Number(e.target.value)),\n        fullWidth: true,\n        InputProps: {\n          startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n            position: \"start\",\n            children: /*#__PURE__*/_jsxDEV(DnsIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 15\n          }, this)\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        size: \"large\",\n        onClick: handleConnect,\n        disabled: !ip || !port,\n        children: \"Connect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n_s(ConnectionForm, \"mfcnlxEXeH6RfdiMQkTfB1mVw78=\");\n_c = ConnectionForm;\nexport default ConnectionForm;\nvar _c;\n$RefreshReg$(_c, \"ConnectionForm\");","map":{"version":3,"names":["React","useState","Box","TextField","Button","Typography","Paper","InputAdornment","LanIcon","DnsIcon","jsxDEV","_jsxDEV","ConnectionForm","onConnect","_s","ip","setIp","port","setPort","error","setError","validateIP","ipRegex","test","handleConnect","sx","p","maxWidth","margin","mt","boxShadow","children","variant","gutterBottom","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","display","flexDirection","gap","label","value","onChange","e","target","helperText","fullWidth","InputProps","startAdornment","position","type","Number","size","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/sivas/My Project/QuickLAN/frontend/src/components/ConnectionForm.jsx"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import { Box, TextField, Button, Typography, Paper } from '@mui/material';\r\n\r\n// const ConnectionForm = ({ onConnect }) => {\r\n//   const [ip, setIp] = useState('');\r\n//   const [port, setPort] = useState(9090);\r\n\r\n//   const handleConnect = () => {\r\n//     if (ip && port) {\r\n//       onConnect(ip, port);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <Paper sx={{ p: 3, maxWidth: 400, margin: 'auto', mt: 6 }}>\r\n//       <Typography variant=\"h5\" gutterBottom>\r\n//         Connect to Receiver\r\n//       </Typography>\r\n//       <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>\r\n//         <TextField\r\n//           label=\"Receiver IP\"\r\n//           value={ip}\r\n//           onChange={(e) => setIp(e.target.value)}\r\n//           fullWidth\r\n//         />\r\n//         <TextField\r\n//           label=\"Receiver Port\"\r\n//           type=\"number\"\r\n//           value={port}\r\n//           onChange={(e) => setPort(Number(e.target.value))}\r\n//           fullWidth\r\n//         />\r\n//         <Button variant=\"contained\" onClick={handleConnect} disabled={!ip || !port}>\r\n//           Connect\r\n//         </Button>\r\n//       </Box>\r\n//     </Paper>\r\n//   );\r\n// };\r\n\r\n// export default ConnectionForm;\r\n\r\n\r\nimport React, { useState } from 'react';\r\nimport {\r\n  Box,\r\n  TextField,\r\n  Button,\r\n  Typography,\r\n  Paper,\r\n  InputAdornment\r\n} from '@mui/material';\r\nimport LanIcon from '@mui/icons-material/Lan';\r\nimport DnsIcon from '@mui/icons-material/Dns';\r\n\r\nconst ConnectionForm = ({ onConnect }) => {\r\n  const [ip, setIp] = useState('');\r\n  const [port, setPort] = useState(9090);\r\n  const [error, setError] = useState('');\r\n\r\n  const validateIP = (ip) => {\r\n    const ipRegex = /^(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.((25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){2}(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)$/;\r\n    return ipRegex.test(ip);\r\n  };\r\n\r\n  const handleConnect = () => {\r\n    if (!validateIP(ip)) {\r\n      setError('Invalid IP address');\r\n      return;\r\n    }\r\n    setError('');\r\n    onConnect(ip, port);\r\n  };\r\n\r\n  return (\r\n    <Paper sx={{ p: 4, maxWidth: 400, margin: 'auto', mt: 6, boxShadow: 3 }}>\r\n      <Typography variant=\"h5\" gutterBottom textAlign=\"center\">\r\n        Connect to Receiver\r\n      </Typography>\r\n\r\n      <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>\r\n        <TextField\r\n          label=\"Receiver IP\"\r\n          value={ip}\r\n          onChange={(e) => setIp(e.target.value)}\r\n          error={!!error}\r\n          helperText={error}\r\n          fullWidth\r\n          InputProps={{\r\n            startAdornment: (\r\n              <InputAdornment position=\"start\">\r\n                <LanIcon />\r\n              </InputAdornment>\r\n            ),\r\n          }}\r\n        />\r\n\r\n        <TextField\r\n          label=\"Port\"\r\n          type=\"number\"\r\n          value={port}\r\n          onChange={(e) => setPort(Number(e.target.value))}\r\n          fullWidth\r\n          InputProps={{\r\n            startAdornment: (\r\n              <InputAdornment position=\"start\">\r\n                <DnsIcon />\r\n              </InputAdornment>\r\n            ),\r\n          }}\r\n        />\r\n\r\n        <Button\r\n          variant=\"contained\"\r\n          size=\"large\"\r\n          onClick={handleConnect}\r\n          disabled={!ip || !port}\r\n        >\r\n          Connect\r\n        </Button>\r\n      </Box>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default ConnectionForm;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}